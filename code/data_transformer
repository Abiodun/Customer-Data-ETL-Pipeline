#Tranformation Code 1

import pandas as pd
import numpy as np

if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def transform(data, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your transformation logic here

    #replace Inc
    data['company'] = data['company'].str.replace('Inc.', 'Limited')

    #Remove currency
    data['currency'] = data['currency'].str.replace('$', '')

    #Format Date
    data['date'] = pd.to_datetime(data['date']).dt.strftime('%d/%m/%Y')


    return data


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'





#Tranformation Code 1

import pandas as pd
import numpy as np

if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def transform(data, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your transformation logic here

    # cus_class
    data['currency'] = pd.to_numeric(data['currency']) #converts the values in the currency column to numeric values
    data['cust_class'] = pd.cut(data['currency'],
                                bins=[0, 45, 65, 90, np.inf],
                                labels=['Poor', 'Fair', 'Very Good', 'Excellent'])

    #change column names
    data = data.rename(columns={'currency':'new_pricing'})


    return data


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'